[gd_scene load_steps=9 format=2]

[ext_resource path="res://scenes/ui/SecondsTimer.tscn" type="PackedScene" id=1]
[ext_resource path="res://scenes/ui/ui_lever.tscn" type="PackedScene" id=2]
[ext_resource path="res://scenes/text/journal_overlay.tscn" type="PackedScene" id=3]
[ext_resource path="res://assets/Art/A-Final/Assets/Notebook.png" type="Texture" id=4]
[ext_resource path="res://scenes/objects/object_text_inspect.tscn" type="PackedScene" id=5]
[ext_resource path="res://scenes/objects/object_text_inspect_ui.gd" type="Script" id=6]

[sub_resource type="Shader" id=8]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(0.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id=9]
resource_local_to_scene = true
shader = SubResource( 8 )
shader_param/color = Color( 0, 0, 0, 0 )
shader_param/width = 1.0
shader_param/pattern = 0
shader_param/inside = false
shader_param/add_margins = true

[node name="UI" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2

[node name="CenterContainer" type="CenterContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2

[node name="VBoxContainer" type="VBoxContainer" parent="CenterContainer"]
margin_right = 1928.0
margin_bottom = 1088.0
mouse_filter = 2
size_flags_horizontal = 3

[node name="Control" type="Control" parent="CenterContainer/VBoxContainer"]
margin_right = 1928.0
margin_bottom = 360.0
rect_min_size = Vector2( 0, 360 )
mouse_filter = 2

[node name="Control2" type="Control" parent="CenterContainer/VBoxContainer"]
margin_top = 364.0
margin_right = 1928.0
margin_bottom = 724.0
rect_min_size = Vector2( 0, 360 )
mouse_filter = 2

[node name="HBoxContainer" type="HBoxContainer" parent="CenterContainer/VBoxContainer"]
margin_top = 728.0
margin_right = 1928.0
margin_bottom = 1088.0
rect_min_size = Vector2( 0, 360 )
mouse_filter = 2

[node name="Control" type="Control" parent="CenterContainer/VBoxContainer/HBoxContainer"]
margin_right = 640.0
margin_bottom = 360.0
rect_min_size = Vector2( 640, 0 )
mouse_filter = 2

[node name="Control2" type="Control" parent="CenterContainer/VBoxContainer/HBoxContainer"]
margin_left = 644.0
margin_right = 1284.0
margin_bottom = 360.0
rect_min_size = Vector2( 640, 0 )
mouse_filter = 2

[node name="Control3" type="Control" parent="CenterContainer/VBoxContainer/HBoxContainer"]
margin_left = 1288.0
margin_right = 1928.0
margin_bottom = 360.0
rect_min_size = Vector2( 640, 0 )
mouse_filter = 2

[node name="SecondsTimer" parent="CenterContainer/VBoxContainer/HBoxContainer/Control3" instance=ExtResource( 1 )]
margin_right = -40.0
margin_bottom = -20.0
mouse_filter = 2

[node name="TextInspect" parent="CenterContainer/VBoxContainer/HBoxContainer" instance=ExtResource( 5 )]
position = Vector2( 1478, 371 )
script = ExtResource( 6 )
TEXT_OVERLAY = ExtResource( 3 )

[node name="Sprite" parent="CenterContainer/VBoxContainer/HBoxContainer/TextInspect" index="0"]
material = SubResource( 9 )
position = Vector2( 75, -52 )
texture = ExtResource( 4 )

[node name="Area2D" parent="CenterContainer/VBoxContainer/HBoxContainer/TextInspect" index="1"]
position = Vector2( -6, 6 )

[node name="CollisionShape2D" parent="CenterContainer/VBoxContainer/HBoxContainer/TextInspect/Area2D" index="0"]
position = Vector2( 98, -48 )

[node name="Object2" parent="CenterContainer/VBoxContainer/HBoxContainer" instance=ExtResource( 2 )]
position = Vector2( 923, 330 )

[editable path="CenterContainer/VBoxContainer/HBoxContainer/TextInspect"]
